<?xml version="1.0" encoding="UTF-8"?>
<!--태그 규칙을 정의한 DTD 선언-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 맵퍼 파일에 작성하는 모든 SQL 문은 <mapper> 태그에 놓는다.-->
<!-- namespace : 자바의 패키지처럼 SQL 문을 묶는 용도로 사용-->
<mapper namespace="spms.dao.MemberDao">

    <!-- 칼럼에 별명을 붙이는 대신 <resultMap> 을 이용하여 클래스의 별명을 지어줌-->
    <!-- type : 칼럼 데이터를 저장할 클래스 이름 또는 클래스 별명-->
    <!-- id : 별명 -->
    <resultMap id="memberResultMap" type="member">
        <id column="MNO" property="no"/>
        <!-- <result> : column 속성과 property 속성과 매핑시킴 -->
        <!-- column : 칼럼 이름을 지정-->
        <!-- property : 객체의 프로퍼티 이름 지정-->
        <!-- MNAME 칼럼 값을 setName() 메서드와 매핑시킴-->
        <result column="MNAME" property="name"/>
        <result column="EMAIL" property="email"/>
        <result column="PWD" property="password"/>
        <!-- javaType : 칼럼의 값을 특정 자바 객체로 변환-->
        <result column="CRE_DATE" property="createDate" javaType="java.sql.Date"/>
        <result column="MOD_DATE" property="modifiedDate" javaType="java.sql.Date"/>
    </resultMap>

    <!-- SELECT 역할을 하는 태그-->
    <!-- <resultMap> 에 정의된 대로 자바 객체를 생성 -->
    <!-- parameterType : 매개변수 타입-->
    <select id="selectList" parameterType="map" resultMap="memberResultMap">
        select MNO, MNAME, EMAIL, CRE_DATE
        from MEMBERS
        order by
        -- 여러 개의 조건을 검사해서 해당하는 조건의 SQL을 반환
        <choose>
            <when test="orderCond == 'NAME_ASC'">MNAME asc</when>
            <when test="orderCond == 'NAME_DESC'">MNAME desc</when>
            <when test="orderCond == 'EMAIL_ASC'">EMAIL asc</when>
            <when test="orderCond == 'EMAIL_DESC'">EMAIL desc</when>
            <when test="orderCond == 'CREDATE_ASC'">CRE_DATE asc</when>
            <when test="orderCond == 'CREDATE_DESC'">CRE_DATE desc</when>
            <when test="orderCond == 'MNO_ASC'">MNO asc</when>
            <otherwise>MNO desc</otherwise>
        </choose>
    </select>

<!--    #{프로퍼티명} : member 객체의 getter/setter 프로퍼티 값이 놓인다.-->
    <insert id="insert" parameterType="member">
        insert into MEMBERS(MNAME, EMAIL, PWD, CRE_DATE, MOD_DATE)
        values (#{name}, #{email}, #{password}, now(), now())
    </insert>

    <!-- parameter : 기본 타입의 객체 랩퍼로 부터 값을 꺼낼 때는-->
    <!--    아무 이름(value)이나 사용해도 된다.-->
    <select id="selectOne" parameterType="int" resultMap="memberResultMap">
        select MNO, MNAME, EMAIL, CRE_DATE, MOD_DATE
        from MEMBERS
        where MNO=#{value}
    </select>

    <update id="update" parameterType="map">
        update MEMBERS
        -- 이 태그는 UPDATE 문의 SET 절을 만들 때 사용한다.
        <set>
            <if test="name != null">MNAME=#{name},</if>
            <if test="email != null">EMAIL=#{email},</if>
            MOD_DATE=now()
        </set>
        where MNO=#{no}
    </update>

    <delete id="delete" parameterType="int">
        delete from MEMBERS
        where MNO=#{value}
    </delete>

    <select id="exist" parameterType="map" resultMap="memberResultMap">
        select MNO, MNAME, EMAIL, CRE_DATE, MOD_DATE
        from MEMBERS
        where EMAIL=#{email} and PWD=#{password}
    </select>

</mapper>